{"version":3,"sources":["dom.js"],"names":["window","dom","style","node","name","value","arguments","length","Object","object","key","find","selector","scope","document","querySelectorAll","each","nodeList","fn","i","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEAA,MAAM,CAACC,GAAP,GAAa;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,KAhES,iBAgEHC,IAhEG,EAgEGC,IAhEH,EAgESC,KAhET,EAgEgB;AACrB,QAAIC,SAAS,KAAK,CAAlB,EAAqB;AACjB;AACAH,MAAAA,IAAI,CAACD,KAAL,CAAWE,IAAX,IAAmBC,KAAnB;AACH,KAHD,MAGO,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B,UAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC1B;AACA,eAAOD,IAAI,CAACD,KAAL,CAAWE,IAAX,CAAP;AACH,OAHD,MAGO,IAAIA,IAAI,YAAYI,MAApB,EAA4B;AAAC;AAChC,YAAMC,MAAM,GAAGL,IAAf;;AACA,aAAK,IAAIM,GAAT,IAAgBD,MAAhB,EAAwB;AACpBN,UAAAA,IAAI,CAACD,KAAL,CAAWQ,GAAX,IAAkBD,MAAM,CAACC,GAAD,CAAxB,CADoB,CACS;AAChC;AACJ;AACJ;AAEJ,GAhFQ;AAiFT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,IAlGS,gBAkGJC,QAlGI,EAkGMC,KAlGN,EAkGa;AAAC;AACnB,WAAO,CAACA,KAAK,IAAIC,QAAV,EAAoBC,gBAApB,CAAqCH,QAArC,CAAP,CADkB,CACmC;AACxD,GApGQ;AAqGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,EAAAA,IA7HS,gBA6HJC,QA7HI,EA6HMC,EA7HN,EA6HU;AACf,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACV,MAA7B,EAAqCY,CAAC,EAAtC,EAA0C;AACtCD,MAAAA,EAAE,CAACE,IAAH,CAAQ,IAAR,EAAcH,QAAQ,CAACE,CAAD,CAAtB,EADsC,CACZ;AAC7B;AACJ,GAjIQ,CAkIT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1IS,CAAb,EA4IA;AASA;AACA;AAEA","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["// window.dom = {\r\n//     create(tagName) {\r\n//         return document.createElement(tagName);\r\n//     }//这个时全局对象\r\n// };\r\n\r\n// 一、增\r\n\r\nwindow.dom = {\r\n    // create(string) { //通过传参就可以在div标签中添加传给形参string的实参\r\n    //     const container = document.createElement('template');//但是div元素不能容纳<td>等标签，但是<template></template>可以\r\n    //     container.textContent = string.trim();//不trim可能有空格,trim()就是把字符串两边的空格去掉          我把innerHTML换掉了\r\n    //     // console.log(container);\r\n    //     return container.content.firstChild;\r\n    // },\r\n    // after(node, node2) {//搜Js dom insert after\r\n    //     // node.parentNode.insertBefore(node, node2);//这可以把node2节点插到node节点前面\r\n    //     node.parentNode.insertBefore(node2, node.nextSibling);//这样可以把node2插到node节点下一个节点的前面\r\n    // },\r\n    // before(node, node2) {\r\n    //     node.parentNode.insertBefore(node2, node);//把node节点插入到node2节点前面\r\n    // },\r\n    // append(parent, node) {\r\n    //     parent.appendChild(node);//在parent节点内新增节点\r\n    // },\r\n    // wrap(node, parent) {//先把parent节点换到node节点前面，再把node节点放到parent节点里面，这样就给node节点新增了一个父节点parent\r\n    //     dom.before(node, parent);\r\n    //     dom.append(parent, node);\r\n    // },\r\n    // remove(node) {\r\n    //     node.parentNode.removeChild(node);//.remove()这个API可能IE不支持，太新\r\n    //     return node;\r\n    // },\r\n    // empty(node) {\r\n    //     // node.innerHTML = '';如果使用这个API，你就不能获取到被删除的节点\r\n    //     const { childNodes } = node;//解构赋值语法，是const childNodes = node.childNodes;的简写\r\n    //     const array = [];\r\n    //     let x = node.firstChild;\r\n    //     while (x) {\r\n    //         array.push(dom.remove(node.firstChild));\r\n    //     };\r\n    //     return array\r\n    // },\r\n    // attr(node, name, value) {//重载:根据参数个数不同写不同的代码\r\n    //     if (arguments.length === 3) {\r\n    //         node.setAttribute(name, value)//该属性的作用是将id为node的节点的name改成value\r\n    //     } else if (arguments.length === 2) {\r\n    //         return node.getAttribute(name)\r\n    //     }\r\n    // },\r\n    // test(node, string) {//这种区分使用不同代码就叫适配\r\n    //     if (arguments.length === 2) {\r\n    //         if ('innerText' in node) {\r\n    //             node.innerText = string //ie\r\n    //         } else {\r\n    //             node.textContent = string  //firefox/chrome\r\n    //         }\r\n    //     } else if (arguments.length === 1) {\r\n    //         if ('innerText' in node) {\r\n    //             return node.innerText\r\n    //         } else {\r\n    //             return node.textContent\r\n    //         }\r\n    //     }\r\n    // },\r\n    // html(node, string) {//更改html的内容 (根据参数不同的长度实现不同的效果：重载)\r\n    //     if (arguments.length === 2) {\r\n    //         node.innerHTML = string\r\n    //     } else {\r\n    //         return node.innerHTML\r\n    //     }\r\n    // },\r\n    style(node, name, value) {\r\n        if (arguments === 3) {\r\n            // dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                // dom.style(div,'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {//如果name是Object中的实例\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]//一般是node.style.border/color，但是这里是一个变量，只能用[]\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    // class: {\r\n    //     add(node, className) {\r\n    //         node.classList.add(className)\r\n    //     },\r\n    //     remove(node, className) {\r\n    //         node.classList.remove(className)\r\n    //     },\r\n    //     has(node, className) {\r\n    //         return node.classList.contains(className)//查看该节点有没有该类名\r\n    //     }\r\n    // },\r\n    // on(node, eventName, fn) {\r\n    //     node.addEventListener(eventName, fn)\r\n    // },\r\n    // off(node, eventName, fn) {\r\n    //     node.removeEventListener(eventName, fn)\r\n    // },\r\n    find(selector, scope) {//给我一个选择器实参\r\n        return (scope || document).querySelectorAll(selector)//如果实参有scope，就用scope.querySelectorAll\r\n    },\r\n    // parent(node) {\r\n    //     return node.parentNode\r\n    // },\r\n    // children(node) {\r\n    //     return node.children\r\n    // },\r\n    // siblings(node) {\r\n    //     return Array.from(node.parentNode.children).filter(n => n !== node)//因为children是伪数组，不能使用.filter方法，要用Array.from()转成数组\r\n    //     // filter(n=>n!==node) filter对于兄弟节点过滤，如果某个节点不等于传进来的node，那么就return到数组里，这样就可以筛选出除自身以外的兄弟元素\r\n    // },\r\n    // next(node) {\r\n    //     let x = node.nextSibling;\r\n    //     while (x && x.nodeType === 3) {//x存在且x类型为3(文本)，目的是为了跳过空格和换行\r\n    //         x = x.nextSibling\r\n    //     }\r\n    //     return x\r\n    // },\r\n    // previous(node) {\r\n    //     let x = node.previousSibling;\r\n    //     while (x && x.nodeType === 3) {//x存在且x类型为3(文本)，目的是为了跳过空格和换行\r\n    //         x = x.previousSibling\r\n    //     }\r\n    //     return x\r\n    // },\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])//this不传，所以写null\r\n        }\r\n    },\r\n    // index(node) {//用于获取元素排行老几\r\n    //     const list = dom.children(node.parentNode)\r\n    //     let i;\r\n    //     for (i = 0; i < list.length; i++) {\r\n    //         if (list[i] === node)\r\n    //             break//如果list[i]等于节点的值，就直接return索引i，从而获取node的索引\r\n    //     }\r\n    //     return i\r\n    // }\r\n}\r\n// 在封装这个DOM库的时候，使用的大多数都是DOM的原生API，所以可以去MDN搜一下DOM的渊生api学一下\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 1.上面第一个函数dom.create()是用来创建节点（元素）\r\n// 2.下面第二个函数dom.after()用来在一个节点后面新增节点\r\n\r\n// 二、删 会用到两个方法：.remove(node)将一个节点从树中删掉；.empty(parent)用于删除后代节点\r\n"]}